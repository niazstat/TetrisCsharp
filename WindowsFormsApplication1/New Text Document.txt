using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Timers;
namespace WindowsFormsApplication1
{
    public partial class Form1 : Form
    {
        System.Timers.Timer timer;
        RectObj rect;

        List<RectObj> list = new List<RectObj>();

        static int initStart = 4;
        static int noOfBlockInRow = 10;

        int currentShapeIndex = 0;
        int currentRotationIndex = 1;
        public Form1()
        {
            InitializeComponent();
            timer = new System.Timers.Timer(1000);
            timer.Elapsed += Timer_Elapsed;
        }
        int[,] lShape = {
            { initStart, initStart + 1, initStart + noOfBlockInRow, 2 * noOfBlockInRow + initStart },
              { 1* noOfBlockInRow + initStart,  1 * noOfBlockInRow + initStart+1, 1 * noOfBlockInRow + initStart+2, 2 * noOfBlockInRow + initStart+2}

        };
        private void Timer_Elapsed(object sender, ElapsedEventArgs e)
        {

            MoveDown();

        }

        int _firstMove = 0;
        private void MoveDown()
        {

           
            UndrawDraw();
  
            lShape[currentRotationIndex, 0]+= _firstMove;
            lShape[currentRotationIndex, 1] += _firstMove;
            lShape[currentRotationIndex, 2] += _firstMove;
            lShape[currentRotationIndex, 3]+= _firstMove;
            //  initStart += noOfBlockInRow;
            _firstMove = noOfBlockInRow;
                    Draw();
            freeze();
        }

        private void UndrawDraw()
        {

            for (int i = 0; i < lShape.GetLength(1); i++)
            {
                list[lShape[currentRotationIndex, i]].SetInActive();
            }

         
      
        }

        private void Draw()
        {

            for (int i = 0; i < lShape.GetLength(1); i++)
            {
                list[lShape[currentRotationIndex, i]].SetActive();
            }
        }
     
    
     
       

     
        private void button1_Click(object sender, EventArgs e)
        {





            DrawAllRectangle();
            //Rectangle rect = new Rectangle(10, 10, 100, 50);
         

           
            // Draw the rectangle using a Graphics object
            // Graphics graphics = this.CreateGraphics(); // this refers to the current form or control
            // Pen pen = new Pen(Color.Black); // create a black pen to draw the outline of the rectangle
            // graphics.DrawRectangle(pen, rect);

        }

        private void DrawAllRectangle()
        {
            int i = 1;
            int _x = 10;
            int _y = 10;
            foreach (var item in list)
            {
                item.DrawRectangle(_x, _y, 20, 20);
                _x += 21;
                if (i % 10 == 0)
                {
                    _x = 10;
                    _y += 21;
                }
                i += 1;
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
           

         
            for (int i = 0; i < 200; i++)
            {
              
                list.Add(new RectObj(this,   Color.Red));
            
                  
            }
            //Create Some Transparent Block
            for (int i = 1; i <= 10; i++)
            {

                list.Add(new RectObj(this,  Color.Transparent,"Taken"));
            
                

            }



        }


        private void freeze()
        {
            if (IsEndofRow())
            {
                for (int i = 0; i < lShape.GetLength(1); i++)
                {
                    list[lShape[currentRotationIndex, i]].TagName = "Taken";
                          
                }
                initStart = 4;

              //  lShape[currentRotationIndex, 0] = initStart;
               // lShape[currentRotationIndex, 1] = initStart + 1;
              //  lShape[currentRotationIndex, 2] = initStart + noOfBlockInRow;
              //  lShape[currentRotationIndex, 3] = 2 * noOfBlockInRow + initStart;

                for (int i = 190; i < 200; i++)
                {
                    list[i].SetInGreen(); ;
                }

                List<RectObj> list2 = new List<RectObj>();

               // for (int i = 0; i < 200; i++)
                //{
                    list.RemoveRange(190, 10);
                // }



                list2 = list.ToList();
                
                for (int i = 0; i < 10; i++)
                {
                    list2.Insert(0, new RectObj(this, Color.Red,"NEw Item_"+i.ToString()));
                }

                list = new List<RectObj>();

                list = list2.ToList();

                DrawAllRectangle();


            }
        }

        private bool IsEndofRow()
        {
            for (int i = 0; i < lShape.GetLength(1); i++)
            {
              if(  list[lShape[currentRotationIndex, i] + noOfBlockInRow].TagName == "Taken")
                {
                    return true;
                }
            }
            return false;

        }

        private void button2_Click(object sender, EventArgs e)
        {
            //  list[2].UndrawRectangle();
            timer.Start();
       
        }

        private void button3_Click(object sender, EventArgs e)
        {

            for (int i = 0; i < 10; i++)
            {
                list.Insert(0, new RectObj(this, Color.Red, "NEw Item_" + i.ToString()));
            }
        }
    }


    public  class RectObj
    {
      

        private Control cntrl;
        public Rectangle Rect;
         //Pen pen;
        private Graphics graphics;
        Brush brush;

        public string TagName { get; set; } 
        public RectObj(Control _cntrl,Color color,string _tagName="Active" )
        {
            brush = new SolidBrush(color);
           
            cntrl = _cntrl;
            // graphics = cntrl.CreateGraphics();
          //  cntrl.Paint += Cntrl_Paint;
            TagName = _tagName;

        }

        private void Cntrl_Paint(object sender, PaintEventArgs e)
        {
          
            e.Graphics.FillRectangle(brush, Rect);
        }

        public void DrawRectangle(int x, int y, int width, int height)
        {
            Rect = new Rectangle(x, y, width, height);
        
            // graphics.DrawRectangle(pen, Rect);
     
            cntrl.CreateGraphics().FillRectangle(brush, Rect);
        }

        public void SetActive()
        {
            brush = new SolidBrush(Color.Blue);
            cntrl.CreateGraphics().FillRectangle(brush, Rect);

           // cntrl.Invalidate(Rect);
        }

        public void SetInActive()
        {
            brush = new SolidBrush(Color.Red);
            cntrl.CreateGraphics().FillRectangle(brush, Rect);
            // cntrl.Invalidate(Rect);
        }

        public void SetInGreen()
        {
            brush = new SolidBrush(Color.Green);
            cntrl.CreateGraphics().FillRectangle(brush, Rect);
            // cntrl.Invalidate(Rect);
        }
    }
}
